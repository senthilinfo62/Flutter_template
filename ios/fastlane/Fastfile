# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Build iOS app for CI/CD"
  lane :build_ci do
    # Ensure we're in the right directory
    Dir.chdir("..") do
      # Clean previous builds
      sh("flutter clean")

      # Get dependencies
      sh("flutter pub get")

      # Generate code
      sh("dart run build_runner build --delete-conflicting-outputs")

      # Build iOS without codesigning
      sh("flutter build ios --release --no-codesign")
    end
  end

  desc "Build iOS app with Firebase compatibility fixes"
  lane :build_firebase do
    # Set environment variables for Firebase compatibility
    ENV["SWIFT_VERSION"] = "5.0"
    ENV["IPHONEOS_DEPLOYMENT_TARGET"] = "14.0"

    # Ensure we're in the Flutter project root directory
    Dir.chdir("../..") do
      # Clean previous builds
      sh("flutter clean")

      # Get dependencies
      sh("flutter pub get")

      # Generate code
      sh("dart run build_runner build --delete-conflicting-outputs")

      # Update pods with specific Firebase settings
      Dir.chdir("ios") do
        sh("pod install --repo-update")
      end

      # Build iOS with specific Xcode settings
      sh("flutter build ios --release --no-codesign")
    end
  end

  desc "Setup iOS project for development"
  lane :setup do
    # Install pods
    cocoapods(
      clean_install: true,
      podfile: "./Podfile"
    )
  end

  desc "Run iOS tests"
  lane :test do
    # Run Flutter tests
    Dir.chdir("..") do
      sh("flutter test")
    end
  end

  desc "Build and distribute based on environment"
  lane :deploy_testflight do
    # Configure environment based on branch
    configure_environment

    # Build the app
    build_firebase

    # Get version info
    version = get_version_name
    build_number = get_version_code
    environment = get_environment

    # Handle distribution based on environment
    if should_distribute_firebase(environment)
      # Firebase App Distribution for dev/stg
      # Build for development distribution
      gym(
        scheme: "Runner",
        export_method: "development",
        output_directory: "./build/ios/ipa"
      )

      firebase_app_distribution(
        app: get_firebase_app_id(environment),
        groups: get_firebase_groups(environment),
        release_notes: generate_release_notes(version, environment),
        firebase_cli_path: "/usr/local/bin/firebase"
      )
      puts "‚úÖ Distributed to Firebase App Distribution (#{environment.upcase})"
    else
      # TestFlight for production
      gym(
        scheme: "Runner",
        export_method: "app-store",
        output_directory: "./build/ios/ipa"
      )

      upload_to_testflight(
        skip_waiting_for_build_processing: true,
        skip_submission: true,
        distribute_external: false,
        notify_external_testers: false
      )
      puts "‚úÖ Uploaded to TestFlight (#{environment.upcase})"
    end

    # Run post-deployment automation
    Dir.chdir("../..") do
      sh("python3 scripts/post_deployment.py ios #{version} #{build_number} #{environment}")
    end
  end

  desc "Build and archive iOS app"
  lane :archive do
    # Build the app
    build_firebase

    # Archive the app (if needed for distribution)
    gym(
      scheme: "Runner",
      export_method: "development",
      skip_codesigning: true,
      output_directory: "./build/ios/archive"
    )
  end

  desc "Clean build artifacts"
  lane :clean do
    Dir.chdir("..") do
      sh("flutter clean")
      sh("cd ios && rm -rf build && cd ..")
      sh("cd ios && pod cache clean --all && cd ..")
    end
  end

  # Helper functions
  def configure_environment
    # Configure environment based on current branch
    Dir.chdir("../..") do
      sh("python3 scripts/environment_manager.py")
    end
  end

  def get_environment
    # Get current environment from branch
    Dir.chdir("../..") do
      branch = sh("git rev-parse --abbrev-ref HEAD").strip

      if branch.start_with?('release/') || branch == 'main'
        return 'production'
      elsif ['development', 'develop', 'dev'].include?(branch) || branch.start_with?('qa/')
        return 'staging'
      else
        return 'development'
      end
    end
  end

  def get_version_name
    # Extract version from pubspec.yaml
    Dir.chdir("../..") do
      pubspec = File.read("pubspec.yaml")
      version_line = pubspec.match(/version:\s*(.+)/)
      return version_line[1].split('+')[0] if version_line
    end
    return "1.0.0"
  end

  def get_version_code
    # Extract build number from pubspec.yaml
    Dir.chdir("../..") do
      pubspec = File.read("pubspec.yaml")
      version_line = pubspec.match(/version:\s*(.+)/)
      return version_line[1].split('+')[1] if version_line && version_line[1].include?('+')
    end
    return "1"
  end

  def should_distribute_firebase(environment)
    # Only dev and stg use Firebase App Distribution
    ['development', 'staging'].include?(environment)
  end

  def get_firebase_app_id(environment)
    # Firebase App IDs for each environment
    case environment
    when 'development'
      return ENV['FIREBASE_APP_ID_IOS_DEV'] || "1:123456789012:ios:wxyz5678abcd9012"
    when 'staging'
      return ENV['FIREBASE_APP_ID_IOS_STG'] || "1:234567890123:ios:ijkl9012mnop3456"
    else
      return nil
    end
  end

  def get_firebase_groups(environment)
    # Firebase distribution groups
    case environment
    when 'development'
      return "ios-developers, qa-team"
    when 'staging'
      return "qa-team, stakeholders, beta-testers"
    else
      return nil
    end
  end

  def generate_release_notes(version, environment)
    # Generate release notes for Firebase distribution
    Dir.chdir("../..") do
      changelog = sh("git log --oneline -5 --pretty=format:'- %s'").strip rescue "- Latest changes"

      notes = "üçé iOS #{environment.upcase} Build v#{version}\n\n"
      notes += "üìù Recent Changes:\n#{changelog}\n\n"
      notes += "üîß Environment: #{environment.upcase}\n"
      notes += "üì± Bundle ID: com.example.flutter.projects"
      notes += environment == 'development' ? '.dev' : (environment == 'staging' ? '.stg' : '')
      notes += "\n\nüß™ This is a #{environment} build for testing purposes."
      notes += "\n\nüì≤ Install via Firebase App Distribution"

      return notes
    end
  end
end
