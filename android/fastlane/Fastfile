# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Build Android APK and AAB for CI/CD (Optimized)"
  lane :build_ci do
    # Ensure we're in the Flutter project root
    Dir.chdir("../..") do
      # Clean previous builds (minimal clean)
      sh("flutter clean")

      # Get dependencies with pub cache optimization
      sh("flutter pub get")

      # Generate code with parallel processing
      sh("dart run build_runner build --delete-conflicting-outputs")

      # Build APK and AAB in parallel using optimized Flutter commands
      sh("flutter build apk --release")
      sh("flutter build appbundle --release")
    end
  end

  desc "Build Android APK only (Fast)"
  lane :build_apk do
    Dir.chdir("../..") do
      sh("flutter clean")
      sh("flutter pub get")
      sh("dart run build_runner build --delete-conflicting-outputs")
      sh("flutter build apk --release")
    end
  end

  desc "Build Android AAB only (Fast)"
  lane :build_aab do
    Dir.chdir("../..") do
      sh("flutter clean")
      sh("flutter pub get")
      sh("dart run build_runner build --delete-conflicting-outputs")
      sh("flutter build appbundle --release")
    end
  end

  desc "Clean Android build artifacts"
  lane :clean do
    Dir.chdir("../..") do
      sh("flutter clean")
      # Additional Android-specific cleanup
      Dir.chdir("android") do
        sh("./gradlew clean") if File.exist?("gradlew")
      end
    end
  end

  desc "Build and upload to Play Store Internal Release"
  lane :deploy_internal do
    # Configure environment based on branch
    configure_environment

    # Build the app
    build_ci

    # Get version info
    version = get_version_name
    build_number = get_version_code
    environment = get_environment

    # Upload to appropriate Play Store track based on environment
    track = get_play_store_track(environment)

    upload_to_play_store(
      track: track,
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )

    # Run post-deployment automation
    Dir.chdir("../..") do
      sh("python3 scripts/post_deployment.py android #{version} #{build_number} #{environment}")
    end
  end

  desc "Build and upload to Play Store Alpha"
  lane :deploy_alpha do
    build_ci
    upload_to_play_store(
      track: 'alpha',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Setup Android development environment"
  lane :setup do
    # Verify Android SDK and tools
    sh("flutter doctor -v")
  end

  # Helper functions
  def configure_environment
    # Configure environment based on current branch
    Dir.chdir("../..") do
      sh("python3 scripts/environment_manager.py")
    end
  end

  def get_environment
    # Get current environment from branch
    Dir.chdir("../..") do
      branch = sh("git rev-parse --abbrev-ref HEAD").strip

      if branch.start_with?('release/') || branch == 'main'
        return 'production'
      elsif ['development', 'develop', 'dev'].include?(branch) || branch.start_with?('qa/')
        return 'staging'
      else
        return 'development'
      end
    end
  end

  def get_play_store_track(environment)
    # Map environment to Play Store track
    case environment
    when 'production'
      return 'internal'  # Use internal for production testing
    when 'staging'
      return 'internal'  # Use internal for staging
    when 'development'
      return 'internal'  # Use internal for development
    else
      return 'internal'
    end
  end

  def get_version_name
    # Extract version from pubspec.yaml
    Dir.chdir("../..") do
      pubspec = File.read("pubspec.yaml")
      version_line = pubspec.match(/version:\s*(.+)/)
      return version_line[1].split('+')[0] if version_line
    end
    return "1.0.0"
  end

  def get_version_code
    # Extract build number from pubspec.yaml
    Dir.chdir("../..") do
      pubspec = File.read("pubspec.yaml")
      version_line = pubspec.match(/version:\s*(.+)/)
      return version_line[1].split('+')[1] if version_line && version_line[1].include?('+')
    end
    return "1"
  end
end
